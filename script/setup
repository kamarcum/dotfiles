#! /bin/bash

SCRIPT_DIR="$(dirname $0)"
DOTFILES_HOME="${HOME}/.dotfiles/home"
OS="$(uname -s | tr '[:upper:]' '[:lower:]')"

copy() {
  echo "Copying $1"
  if [ -f "$HOME/$1" ]; then
    echo "  Oh dear. I couldn't copy $1 because it already exists."
    echo "  This is totally normal if you've already run this script once before."
    echo "  If you want to use my latest copy of that file,"
    echo "  \`rm $HOME/$1\` and rerun this script."
    return 1
  else
    cp "${DOTFILES_HOME}/$1" "${HOME}/$1"
  fi
}

link() {
  echo "Linking $1"
  if [ "$(readlink $HOME/$1)" == "${DOTFILES_HOME}/$1" ]; then
    return 0;
  elif [ -f "$HOME/$1" ]; then
    echo "  Oh dear. I couldn't symlink $1 because it's already a file."
    echo "  \`rm $HOME/$1\` and rerun this script to establish the link."
    return 1
  else
    ln -s "${DOTFILES_HOME}/$1" "${HOME}/$1"
  fi
}

install() {
  if [ $OS == "linux" ]; then
    sudo apt-get install -yqq "$@"
  elif [ $OS == "darwin" ]; then
    echo "macOS isn't quite supported yet"
    exit 1
  else
    echo "Oh dear. Why are you running this on ${OS}?"
    exit 1
  fi
}

setup_bash() {
  link ".bash_aliases"
  copy ".bash_aliases.local"
  link ".bashrc" || echo "  Note: Your .bashrc must load .bash_aliases for this setup to run correctly"
  link ".bash_profile" || echo "  Note: Your .bash_profile must load .bashrc for this setup to run correctly"
  echo "Note: To customize your bash settings, edit ~/.bash_aliases.local"
}

install_hub() {
  local version="2.10.0"
  echo "Installing hub version $version"
  if [ -f /usr/local/bin/hub ] &&
    [ "$version" == "$(hub --version | tail -n 1 | cut -d ' ' -f 3)" ]; then
    return 0;
  fi

  cd $HOME
  curl -fLso hub.tgz \
    "https://github.com/github/hub/releases/download/v${version}/hub-${OS}-amd64-${version}.tgz"
  mkdir hub
  tar -xzf hub.tgz -C hub --strip-components=1
  sudo ./hub/install
  rm -rf "$HOME/hub"
}

setup_git() {
  link ".gitconfig"
  copy ".gitconfig.local"
  echo "Note: Edit ~/.gitconfig.local to use your own username and email!"
  install_hub
}

setup_vim() {
  link ".vimrc"
  copy ".vimrc.local"

  if [ ! -f ~/.vim/autoload/plug.vim ]; then
    echo "Downloading plug.vim"
    curl -fLso ~/.vim/autoload/plug.vim --create-dirs \
          https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  fi

  vim +"PlugInstall --sync" +qa > /dev/null 2>&1
  mkdir -p ~/.vim/tmp
}

setup_tmux() {
  install tmux
  link ".tmux.conf"
}

install_packer() {
  local version="1.3.5"
  if [ -f /usr/local/bin/packer ] && [ "$version" == "$(packer --version)" ]; then
    return 0;
  fi

  install unzip
  cd $HOME
  curl -fLso packer.zip \
    "https://releases.hashicorp.com/packer/${version}/packer_${version}_${OS}_amd64.zip"
  unzip packer.zip -d .
  sudo mv packer /usr/local/bin/
  rm packer.zip
}

install_rbenv() {
  local rbenv_root="$HOME/.rbenv"
  local rbenv="$rbenv_root/bin/rbenv"
  if [ -d "$rbenv_root" ]; then
    return 0;
  fi

  git clone https://github.com/rbenv/rbenv.git $rbenv_root
  "$rbenv" init
  mkdir -p "${rbenv_root}/plugins"
  git clone https://github.com/rbenv/ruby-build.git "${rbenv_root}/plugins/ruby-build"
}

install_ruby_build_dependencies() {
  install \
    build-essential \
    libreadline6-dev \
    zlib1g-dev \
    libssl-dev
}

install_rubies() {
  install_rbenv
  install_ruby_build_dependencies
  cd "$HOME/.rbenv/plugins/ruby-build"
  git pull -q
  "$HOME/.rbenv/bin/rbenv" install -s 2.6.2
  link ".gemrc"
}

link ".ackrc" &&
setup_bash &&
setup_git &&
setup_vim &&
setup_tmux &&
install_packer &&
install_rubies &&
install jq tree &&
echo "You're good to go. Customize .gitconfig.local and you'll be off to the races!"
